{"version":3,"sources":["comps/Infobox.jsx","comps/LineGraph.jsx","util.js","comps/CovidMap.jsx","comps/Table/Table.jsx","App.js","index.js"],"names":["Infobox","isRed","title","cases","active","total","props","useState","caseCount","setCaseCount","useEffect","parseFloat","Card","onClick","className","CardContent","Typography","color","suffix","end","decimals","decimal","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","setData","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","CovidMap","countries","center","zoom","MapContainer","TileLayer","url","attribution","map","country","Circle","key","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","mapZoom","mapCountries","setMapCountries","setCasesType","setIsLoaded","getInitialworldwide","getCountriesData","name","iso2","countryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.227eecc1.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Infobox = ({ isRed, title, cases, active, total, ...props }) => {\r\n  const [caseCount, setCaseCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCaseCount(parseFloat(cases));\r\n  }, [cases]);\r\n\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infobox ${active && \"infobox--selected\"} ${\r\n        isRed && \"infobox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infobox_title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infobox_cases ${!isRed && \"infobox_cases--green\"}`}>\r\n          <CountUp suffix=\"k\" end={caseCount} decimals={1} decimal=\",\" />\r\n        </h2>\r\n        <Typography className=\"infobox_total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Infobox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0\r\n    }\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      }\r\n    }\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          parser: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\"\r\n        }\r\n      }\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data\r\n              }\r\n            ]\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 600\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 900\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 1500\r\n  }\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\", index) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      key={index}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../util\";\r\n\r\nfunction CovidMap({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CovidMap;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nconst Table = ({ countries }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr key={country}>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0.0a\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Infobox from \"./comps/Infobox\";\nimport LineGraph from \"./comps/LineGraph\";\nimport CovidMap from \"./comps/CovidMap\";\nimport Table from \"./comps/Table/Table\";\nimport \"./styles.css\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\n\nexport default function App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 25, lng: -15.4796 });\n  const [mapZoom, setMapZoom] = useState(1.5);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const getInitialworldwide = async () => {\n    const response = await fetch(\"https://disease.sh/v3/covid-19/all\");\n    const data = await response.json();\n    setCountryInfo(data);\n  };\n\n  useEffect(() => {\n    getInitialworldwide();\n  }, []);\n\n  const getCountriesData = async () => {\n    const response = await fetch(\"https://disease.sh/v3/covid-19/countries\");\n    const data = await response.json();\n    const countries = await data.map((country) => ({\n      name: country.country,\n      value: country.countryInfo.iso2\n    }));\n    const sortedData = sortData(data);\n    setCountries(countries);\n    setMapCountries(data);\n    setTableData(sortedData);\n  };\n\n  useEffect(() => {\n    getCountriesData();\n  }, []);\n\n  const countryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    setCountry(countryCode);\n    setCountryInfo(data);\n    // setMapCenter([country.countryInfo.lat, country.countryInfo.long]);\n    // setMapZoom(4);\n  };\n\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl>\n            <Select\n              className=\"select\"\n              variant=\"outlined\"\n              value={country}\n              onChange={countryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem key={country.value} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <Infobox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <Infobox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <Infobox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <CovidMap\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide Live {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}